{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","React","Component","Form","onSubmit","this","props","getWeather","class","className","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","value","fetch","concat","sent","json","cod","console","log","_this","setState","main","temp","sys","weather","message","toUpperCase","stop","components_Titles","components_Form","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ace07ad6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Titles extends React.Component {\r\n  render() {\r\n    return (\r\n        <div>\r\n          <h1>Weather Tracker</h1>\r\n          <h5>Track weather around the world!</h5>\r\n        </div>\r\n      );\r\n  }\r\n};\r\n\r\nexport default Titles;","import React from 'react';\r\n\r\nclass Form extends React.Component {\r\n  render() {\r\n    return (\r\n        <form onSubmit={this.props.getWeather} class=\"form-group\">\r\n          <input className=\"form-control input-sm\" type=\"text\" name=\"city\" placeholder=\"Enter City...\"/>          \r\n          <input className=\"form-control input-sm\" type=\"text\" name=\"country\" placeholder=\"Enter Country...\"/>          \r\n          <button className=\"btn btn-info btn-block\">Get Weather</button>\r\n        </form>\r\n      );\r\n  }\r\n};\r\n\r\nexport default Form; ","import React from 'react';\r\n\r\nclass Weather extends React.Component {\r\n  render() {\r\n    return (\r\n        <div className=\"weather_values\">\r\n          {/*Values will be displayed if they exist*/}          \r\n          {this.props.city && this.props.country && <p>Location: {this.props.city}, {this.props.country}</p>}\r\n          {this.props.temperature && <p>Temperature: {this.props.temperature}&#176;C</p>}\r\n          {this.props.humidity && <p>Humidity: {this.props.humidity}</p>}\r\n          {this.props.description && <p>Weather: {this.props.description}</p>}\r\n          {this.props.error && <h6>{this.props.error}</h6>}\r\n        </div>\r\n      );\r\n  }\r\n};\r\n\r\nexport default Weather;\r\n","import React from 'react';\r\nimport Titles from './components/Titles';\r\nimport Form from './components/Form';\r\nimport Weather from './components/Weather';\r\n\r\nconst API_KEY = '0963e7dea5df366e323be49f54cf2194';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    temperature: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    humidity: undefined,\r\n    description: undefined,\r\n    error: undefined\r\n  }\r\n\r\n  //Async, Await, Fetch API\r\n  getWeather = async (e) => {    \r\n    e.preventDefault(); // Prevent page refresh\r\n    const city = e.target.city.value;\r\n    const country = e.target.country.value;\r\n    const api_call = await fetch(\r\n        `https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}&units=metric`\r\n    );\r\n    const data = await api_call.json();\r\n    if (city && country && data.cod !== '404') {\r\n      console.log(data);\r\n      // New state values for valid city and country\r\n      this.setState({\r\n      temperature: data.main.temp,\r\n      city: data.name,\r\n      country: data.sys.country,\r\n      humidity: data.main.humidity,\r\n      description: data.weather[0].description,\r\n      error: ''\r\n    })\r\n    } else if (data.cod === \"404\") {\r\n      this.setState({\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        error: data.message.toUpperCase()\r\n      })\r\n    } \r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"main\">\r\n        <div className=\"container\">               \r\n          <Titles />               \r\n          <Form getWeather={this.getWeather} />\r\n          <Weather \r\n            temperature={this.state.temperature} \r\n            humidity={this.state.humidity}\r\n            city={this.state.city}\r\n            country={this.state.country}\r\n            description={this.state.description}\r\n            error={this.state.error}\r\n            />             \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
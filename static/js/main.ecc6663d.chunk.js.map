{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","React","Component","Form","onSubmit","this","props","getWeather","class","className","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","value","fetch","concat","sent","json","cod","console","log","_this","setState","main","temp","sys","weather","message","toUpperCase","stop","components_Titles","components_Form","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ecc6663d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Titles extends React.Component {\r\n  render() {\r\n    return (\r\n        <div>\r\n          <h1>Weather Tracker</h1>\r\n          <h5>Track weather around the world!</h5>\r\n        </div>\r\n      );\r\n  }\r\n};\r\n\r\nexport default Titles;","import React from 'react';\r\n\r\nclass Form extends React.Component {\r\n  render() {\r\n    return (\r\n        <form onSubmit={this.props.getWeather} class=\"form-group\">\r\n          <input className=\"form-control input-sm\" type=\"text\" name=\"city\" placeholder=\"Enter City...\"/>\r\n          <input className=\"form-control input-sm\" type=\"text\" name=\"country\" placeholder=\"Enter Country...\"/>\r\n          <button className=\"btn btn-info btn-block\">Get Weather</button>\r\n        </form>\r\n      );\r\n  }\r\n};\r\n\r\nexport default Form; ","import React from 'react';\r\n\r\nclass Weather extends React.Component {\r\n  render() {\r\n    return (\r\n        <div className=\"weather_values\">\r\n          {/*Values will be displayed if they exist*/}          \r\n          {this.props.city && this.props.country && <p>Location: {this.props.city}, {this.props.country}</p>}\r\n          {this.props.temperature && <p>Temperature: {this.props.temperature}&#176;C</p>}\r\n          {this.props.humidity && <p>Humidity: {this.props.humidity}</p>}\r\n          {this.props.description && <p>Weather: {this.props.description}</p>}\r\n          {this.props.error && <h6>{this.props.error}</h6>}\r\n        </div>\r\n      );\r\n  }\r\n};\r\n\r\nexport default Weather;\r\n","import React from 'react';\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst API_KEY = '0963e7dea5df366e323be49f54cf2194';\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  //Async, Await, Fetch API\n  getWeather = async (e) => {    \n    e.preventDefault(); // Prevent page refresh\n    const city = e.target.city.value;\n    const country = e.target.country.value;\n    const api_call = await fetch(\n        `https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}&units=metric`\n    );\n    const data = await api_call.json();\n    if (city && country && data.cod !== '404') {\n      console.log(data);\n      // New state values for valid city and country\n      this.setState({\n      temperature: data.main.temp,\n      city: data.name,\n      country: data.sys.country,\n      humidity: data.main.humidity,\n      description: data.weather[0].description,\n      error: ''\n    })\n    } else if (data.cod === \"404\") {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: data.message.toUpperCase()\n      })\n    } \n  }\n  render() {\n    return (\n      <div className=\"main\">\n        <div className=\"container\">               \n        <Titles />               \n        <Form getWeather={this.getWeather} />\n        <Weather \n          temperature={this.state.temperature} \n          humidity={this.state.humidity}\n          city={this.state.city}\n          country={this.state.country}\n          description={this.state.description}\n          error={this.state.error}\n          />             \n      </div>\n      </div>\n    );\n  }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}